call plug#begin('~/.vim/plugged')

" GIT
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Feature
Plug 'vim-scripts/sudo.vim' " sudo
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround' " quoting/parenthesis
Plug 'ajh17/vimcompletesme' " autocomplete
Plug 'w0rp/ale' " linter
Plug 'ludovicchabant/vim-gutentags'
Plug 'osyo-manga/vim-over'
Plug 'cespare/vim-toml'
Plug 'scrooloose/nerdcommenter'
Plug 'chr4/nginx.vim'
Plug 'joonty/vdebug' " Debugger
Plug 'mustache/vim-mustache-handlebars'
Plug 'mrk21/yaml-vim'
Plug 'mechatroner/rainbow_csv' " Csv nice formater

" UI
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'

" PHP
Plug 'stanangeloff/php.vim'
Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }
Plug 'dominics/vim-filetype-xdebug'
Plug 'arnaud-lb/vim-php-namespace'
Plug 'evidens/vim-twig'
Plug 'vim-vdebug/vdebug'

" Rust
Plug 'rust-lang/rust.vim'

" DB
Plug 'tpope/vim-dadbod'

" Initialize plugin system
call plug#end()

" Plugins settings

" Debugger mapping
let g:vdebug_options = {
    \"path_maps":
        \{
            \"/var/www/html": "~/dev/wizaplace",
            \"/var/www/app": "~/dev/hurleur-cms",
        \}
    \}

inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
noremap <Leader>u :call PhpInsertUse()<CR>

" ale linter
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_fixers = {
            \ '*': ['trim_whitespace','remove_trailing_lines','isort'],
            \ 'php': ['php_cs_fixer'],
            \ 'twig': ['prettier'],
            \ 'yaml': ['prettier'],
            \ 'json': ['jq'],
            \ 'python': ['autopep8','isort','add_blank_lines_for_python_control_statements'],
            \ 'html': ['prettier'],
            \ 'css': ['prettier']
            \}
let g:ale_php_cs_fixer_options = "--rules=@PSR1,@PSR2,@Symfony"
let g:ale_php_phpcs_standard = 'PSR2'
let g:ale_sign_error = '‚ùåÔ∏è'
" let g:ale_sign_error = 'üö©Ô∏è
let g:ale_sign_warning = '‚ö†Ô∏è '

" gutentags
let g:gutentags_cache_dir = '~/.vim/gutentags'
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js', '*.json', '*.xml',
            \ '*.phar', '*.ini', '*.rst', '*.md',
            \ '*vendor/*/test*', '*vendor/*/Test*',
            \ '*vendor/*/fixture*', '*vendor/*/Fixture*',
            \ '*var/cache*', '*var/log*']

" Shortcuts
nmap <F2> :Files <CR>
nmap <F3> :Rg <CR>
nmap <F9> :!%:p

" Theme
colo gruvbox
set bg=dark
hi Normal ctermbg=none

" UI settings
set nu
set updatetime=100
set mouse=a
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
set hls is " hilight search
set foldmethod=indent
set foldlevel=99

" FZF
" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
            \ call fzf#vim#grep(
            \   'git grep --line-number '.shellescape(<q-args>), 0,
            \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
            \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
            \ call fzf#vim#ag(<q-args>,
            \                 <bang>0 ? fzf#vim#with_preview('up:60%')
            \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
            \                 <bang>0)

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:60%')
            \           : fzf#vim#with_preview('right:50%:hidden', '?'),
            \   <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
